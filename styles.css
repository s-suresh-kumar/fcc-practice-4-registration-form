/* Step 8
The vh unit stands for viewport height, and is relative to 1% of the height of the viewport.

It is time to spruce the project up with some CSS. Begin by giving the body a width of 100%, and a height of 100vh. */

/* Step 9
Now, get rid of the horizontal scroll-bar, by setting the body default margin added by some browsers to 0 */

/* Step 10
That is better. Now, make the background easy on the eyes, by changing the body background-color to #1b1b32. Then, to see the text, change the color to #f5f6f7. */

/* Step 42
The HTML for the registration form is finished. Now, you can spruce it up a bit.

Start by changing the font to Tahoma, and the font size to 16px in the body. */

body {
  width: 100%;
  height: 100vh;
  margin: 0;
  background-color:#1b1b32;
  color: #f5f6f7;
  font-family: Tahoma;
  font-size: 16px;
}

/* Step 43
Center the h1 and p elements by giving them a margin of 1em auto. Then, align their text in the center as well. */

h1,p {
  margin: 1em auto;
  text-align:center;
}

/* Step 44
Center the form element, by giving it a margin of 0 auto. Then, fix its size to a maximum width of 500px, and a minimum width of 300px. In between that range, allow it to have a width of 60vw. */

form {
  margin: 0 auto;
  max-width: 500px;
  min-width:300px;
  width: 60vw;
}

/* Step 45
During development, it is useful to see the fieldset default borders. However, they make the content appear too separated.

Remove the border, and add 2rem of padding only to the top and bottom of each fieldset. Be sure to remove the padding from the left and right. */

/* Step 46
To give the fieldset elements a bit of separation, select them and give them a border-bottom of 3px solid #3b3b4f. */

fieldset {
  border:none;
  padding: 2rem 0;
  border-bottom: 3px solid #3b3b4f;
}

/* Step 47
The border of the last fieldset element looks a little out of place. You can select the last element of a specific type using the last-of-type CSS pseudo-class, like this:

p:last-of-type { }
That will select the last p element. Create a new selector that targets the last fieldset element and set its border-bottom to none. */

fieldset:last-of-type {
  border-bottom:none;
}

/* Step 48
It would be nicer to have the label text appear above the form elements.

Select all input, textarea, and select elements, and make them take up the full width of their parent elements.

Also, add 10px of margin to the top of the selected elements. Set the other margins to 0 */

input,textArea,select {
  width:100%;
  margin: 0;
  margin-top:10px;
  min-height:2em;
}

/* Step 50
Select only the .inline elements, and give them width of unset. This will remove the earlier rule which set all the input elements to width: 100%. */

/* Step 51
Add some space between the .inline elements and the label text, by giving a right margin of 0.5em. Also, set all the other margin to 0. */

/* Step 52
If you look close enough, you will notice the .inline elements are too high on the line.

To combat this, set the vertical-align property to middle. */

.inline {
  width: unset;
  margin: 0 0.5em 0 0;
  vertical-align: middle;
}


/* Step 53
To make the input and textarea elements blend in with the background theme, set their background-color to #0a0a23. Then, give them a 1px, solid border with a color of #0a0a23 */

/* Step 54
Currently, if you type in the input or textarea elements, you will not be able to see the text. Also, their height is too small to be easy to use.

Fix this, by setting the color to #ffffff, and setting their min-height to 2em. */

/* Step 55
You want the select element to remain with a white background, but now it is not getting the same min-height as the input and textarea elements.

Move the min-height property and value so that all three element types have the same min-height value, and the select element still has a white background. */

input,textarea {
  background-color:#0a0a23;
  border: 1px solid #0a0a23;
  color: #ffffff;
}

/* Step 16
The rem unit stands for root em, and is relative to the font size of the html element.

As label elements are inline by default, they are all displayed side by side on the same line, making their text hard to read. To make them appear on separate lines, add display: block to the label element, and add a margin of 0.5rem 0, to separate them from each other. */

label {
  display:block;
  margin:0.5rem 0;
}
